// –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ
// –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞

async function testFrontendBlockFunctionality() {
    console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n');

    const API_BASE_URL = "http://localhost:3000";

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ localStorage (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)
    const token = localStorage.getItem('my token');
    if (!token) {
        console.error('‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ localStorage. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.');
        return;
    }

    console.log('‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω –≤ localStorage');

    try {
        // 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        console.log('1Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
        const usersResponse = await fetch(`${API_BASE_URL}/users`, {
            headers: { "x-auth-token": token },
        });

        if (!usersResponse.ok) {
            throw new Error(`HTTP ${usersResponse.status}: ${await usersResponse.text()}`);
        }

        const users = await usersResponse.json();
        console.log(`   –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);

        // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤–æ–≥–æ –Ω–µ-–∞–¥–º–∏–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        const testUser = users.find(user => !user.isAdmin);
        if (!testUser) {
            console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã)');
            return;
        }

        console.log(`   –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${testUser.email} (ID: ${testUser._id})`);
        console.log(`   –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: isBlocked = ${testUser.isBlocked}, isBusiness = ${testUser.isBusiness}\n`);

        // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        console.log('2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
        const blockResponse = await fetch(`${API_BASE_URL}/users/${testUser._id}/block`, {
            method: 'PATCH',
            headers: {
                "x-auth-token": token,
                "Content-Type": "application/json"
            },
        });

        if (!blockResponse.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: HTTP ${blockResponse.status}: ${await blockResponse.text()}`);
        }

        const blockedUser = await blockResponse.json();
        console.log(`   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω`);
        console.log(`   isBlocked: ${blockedUser.isBlocked}`);
        console.log(`   isBusiness: ${blockedUser.isBusiness} (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å false)\n`);

        // 3. –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        console.log('3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
        await new Promise(resolve => setTimeout(resolve, 1000)); // –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É

        const unblockResponse = await fetch(`${API_BASE_URL}/users/${testUser._id}/unblock`, {
            method: 'PATCH',
            headers: {
                "x-auth-token": token,
                "Content-Type": "application/json"
            },
        });

        if (!unblockResponse.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: HTTP ${unblockResponse.status}: ${await unblockResponse.text()}`);
        }

        const unblockedUser = await unblockResponse.json();
        console.log(`   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω`);
        console.log(`   isBlocked: ${unblockedUser.isBlocked}`);
        console.log(`   isBusiness: ${unblockedUser.isBusiness}\n`);

        // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—ã—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞)
        console.log('4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ã—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
        const updateResponse = await fetch(`${API_BASE_URL}/users/${testUser._id}`, {
            method: 'PATCH',
            headers: {
                "x-auth-token": token,
                "Content-Type": "application/json"
            },
            body: JSON.stringify({ isBusiness: true })
        });

        if (!updateResponse.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: HTTP ${updateResponse.status}: ${await updateResponse.text()}`);
        }

        const updatedUser = await updateResponse.json();
        console.log(`   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω`);
        console.log(`   isBusiness —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤: ${updatedUser.isBusiness}\n`);

        console.log('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! API endpoints —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');
        console.log('\nüìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ UI:');
        console.log('1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É Admin Users (/admin/users)');
        console.log('2. –ù–∞–π–¥–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "Block"');
        console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ "Blocked" –∏ —É–±—Ä–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å "Business"');
        console.log('4. –ù–∞–∂–º–∏—Ç–µ "Unblock" –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
        console.error('–ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
function copyToClipboard() {
    const code = `(${testFrontendBlockFunctionality.toString()})()`;
    navigator.clipboard.writeText(code).then(() => {
        console.log('‚úÖ –ö–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞! –í—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞.');
    });
}

console.log('üîß –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω!');
console.log('üìã –í—ã–ø–æ–ª–Ω–∏—Ç–µ testFrontendBlockFunctionality() –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞');
console.log('üìã –ò–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ copyToClipboard() —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏');

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
window.testFrontendBlockFunctionality = testFrontendBlockFunctionality;
window.copyToClipboard = copyToClipboard;
